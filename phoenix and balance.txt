#A- Phoenix and Balance ->(REFERENCE TO CODEFORCES)

Phoenix has n coins with weights 2^1,2^2,…,2^n. He knows that n is even.

He wants to split the coins into two piles such that each pile has exactly n2 coins and the difference of weights between the two piles is minimized. 
Formally, let a denote the sum of weights in the first pile, and b denote the sum of weights in the second pile. Help Phoenix minimize |a−b|, the absolute value of a−b.

#LOGIC ->

        My logic of this problem is little bit different from other logic.
        There is a sequence that the answer is always the difference of (n/2)th element to 1st element.
        For more understanding, here is the code.

#CODE ->

        //bismillahi rehmanir-raheem
        #include<iostream>
        #include<math.h>
        #include<vector>
        #include<algorithm>
        using namespace std;
 
        int main()
        {
        int t;
        cin>>t;
        while(t--)
        {
            int n;
            cin>>n;
            long q=0,sum1=0,sum2=0;
            std::vector<long>p(n);
            std::vector<long>a(n/2);
            std::vector<long>b(n/2);
            for(long i=1;i<=n;i++)
            {
                p[q]=pow(2,i);
                q++;
            }
            if(n==2)
                cout<<2<<endl;
            else
            {
                cout<<p[n/2]-p[0]<<endl;
            }
        }
        return 0;
        }
